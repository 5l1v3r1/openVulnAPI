/*
 * Cisco PSIRT openVuln API
 * The Cisco Product Security Incident Response Team (PSIRT) openVuln API is a RESTful API that allows customers to obtain Cisco Security Vulnerability information in different machine-consumable formats. APIs are important for customers because they allow their technical staff and programmers to build tools that help them do their job more effectively (in this case, to keep up with security vulnerability information). For more information about the Cisco PSIRT openVuln API visit https://developer.cisco.com/site/PSIRT/discover/overview  For detail steps on how to use the API go to:https://developer.cisco.com/site/PSIRT/get-started/getting-started.gsp  This is a beta release of a swagger YAML for the Cisco PSIRT openVuln API.  To access the API sign in with your Cisco CCO account at http://apiconsole.cisco.com and register an application to recieve a client_id and a client_secret  You can then get your token using curl or any other method you prefer.  'curl -s -k -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -d \"client_id=<your_client_id>\" -d \"client_secret=<your_client_secret>\" -d \"grant_type=client_credentials\" https://cloudsso.cisco.com/as/token.oauth2'  You will receive an access token as demonstrated in the following example:  '{\"access_token\":\"I7omWtBDAieSiUX3shOxNJfuy4J6\",\"token_type\":\"Bearer\",\"expires_in\":3599}'  In Swagger, click on Change Authentication  enter the text \"I7omWtBDAieSiUX3shOxNJfuy4J6\" (which is the token you received)  then click on \"Try this operation\" 
 *
 * OpenAPI spec version: 0.0.3
 * Contact: os@cisco.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for securityAdvisoriesCvrfAdvisoryAdvisoryIdGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfAdvisoryAdvisoryIdGetCall(String advisoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/advisory/{advisory_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "advisory_id" + "\\}", apiClient.escapeString(advisoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfAdvisoryAdvisoryIdGetValidateBeforeCall(String advisoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'advisoryId' is set
        if (advisoryId == null) {
            throw new ApiException("Missing the required parameter 'advisoryId' when calling securityAdvisoriesCvrfAdvisoryAdvisoryIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfAdvisoryAdvisoryIdGetCall(advisoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain an advisory in CVRF format for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     * @param advisoryId advisory ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfAdvisoryAdvisoryIdGet(String advisoryId) throws ApiException {
        securityAdvisoriesCvrfAdvisoryAdvisoryIdGetWithHttpInfo(advisoryId);
    }

    /**
     * 
     * Used to obtain an advisory in CVRF format for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     * @param advisoryId advisory ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfAdvisoryAdvisoryIdGetWithHttpInfo(String advisoryId) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfAdvisoryAdvisoryIdGetValidateBeforeCall(advisoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain an advisory in CVRF format for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     * @param advisoryId advisory ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfAdvisoryAdvisoryIdGetAsync(String advisoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfAdvisoryAdvisoryIdGetValidateBeforeCall(advisoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfAllGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfAllGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/all".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfAllGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfAllGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all advisories in Common Vulnerability Reporting Format (CVRF). For more information about CVRF go to https://communities.cisco.com/docs/DOC-63156 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/cvrf/all.xml 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfAllGet() throws ApiException {
        securityAdvisoriesCvrfAllGetWithHttpInfo();
    }

    /**
     * 
     * Used to obtain all advisories in Common Vulnerability Reporting Format (CVRF). For more information about CVRF go to https://communities.cisco.com/docs/DOC-63156 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/cvrf/all.xml 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfAllGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfAllGetValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all advisories in Common Vulnerability Reporting Format (CVRF). For more information about CVRF go to https://communities.cisco.com/docs/DOC-63156 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/cvrf/all.xml 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfAllGetAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfAllGetValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfCveCveIdGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfCveCveIdGetCall(String cveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/cve/{cve_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "cve_id" + "\\}", apiClient.escapeString(cveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfCveCveIdGetValidateBeforeCall(String cveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cveId' is set
        if (cveId == null) {
            throw new ApiException("Missing the required parameter 'cveId' when calling securityAdvisoriesCvrfCveCveIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfCveCveIdGetCall(cveId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain an advisory in CVRF format for a given Common Vulnerability Enumerator (CVE). The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. For more information about CVE visit http://cve.mitre.org/ 
     * @param cveId CVE Identifier (i.e., CVE-YYYY-NNNN) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfCveCveIdGet(String cveId) throws ApiException {
        securityAdvisoriesCvrfCveCveIdGetWithHttpInfo(cveId);
    }

    /**
     * 
     * Used to obtain an advisory in CVRF format for a given Common Vulnerability Enumerator (CVE). The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. For more information about CVE visit http://cve.mitre.org/ 
     * @param cveId CVE Identifier (i.e., CVE-YYYY-NNNN) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfCveCveIdGetWithHttpInfo(String cveId) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfCveCveIdGetValidateBeforeCall(cveId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain an advisory in CVRF format for a given Common Vulnerability Enumerator (CVE). The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. For more information about CVE visit http://cve.mitre.org/ 
     * @param cveId CVE Identifier (i.e., CVE-YYYY-NNNN) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfCveCveIdGetAsync(String cveId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfCveCveIdGetValidateBeforeCall(cveId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfLatestNumberGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfLatestNumberGetCall(Integer number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/latest/{number}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfLatestNumberGetValidateBeforeCall(Integer number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling securityAdvisoriesCvrfLatestNumberGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfLatestNumberGetCall(number, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all the latest security advisories in CVRF format given an absolute number. For instance, the latest 10 or latest 5. 
     * @param number An absolute number to obtain the latest security advisories. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfLatestNumberGet(Integer number) throws ApiException {
        securityAdvisoriesCvrfLatestNumberGetWithHttpInfo(number);
    }

    /**
     * 
     * Used to obtain all the latest security advisories in CVRF format given an absolute number. For instance, the latest 10 or latest 5. 
     * @param number An absolute number to obtain the latest security advisories. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfLatestNumberGetWithHttpInfo(Integer number) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfLatestNumberGetValidateBeforeCall(number, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all the latest security advisories in CVRF format given an absolute number. For instance, the latest 10 or latest 5. 
     * @param number An absolute number to obtain the latest security advisories. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfLatestNumberGetAsync(Integer number, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfLatestNumberGetValidateBeforeCall(number, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfProductGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfProductGetCall(String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/product".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "product", product));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfProductGetValidateBeforeCall(String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling securityAdvisoriesCvrfProductGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfProductGetCall(product, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all the advisories that affects the given product name. 
     * @param product An product name to obtain security advisories that matches given product name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfProductGet(String product) throws ApiException {
        securityAdvisoriesCvrfProductGetWithHttpInfo(product);
    }

    /**
     * 
     * Used to obtain all the advisories that affects the given product name. 
     * @param product An product name to obtain security advisories that matches given product name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfProductGetWithHttpInfo(String product) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfProductGetValidateBeforeCall(product, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all the advisories that affects the given product name. 
     * @param product An product name to obtain security advisories that matches given product name. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfProductGetAsync(String product, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfProductGetValidateBeforeCall(product, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/severity/{severity}/firstpublished".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetValidateBeforeCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetCall(severity, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format and additionally filter based of firstpublished start date and enddate 
     * @param severity Used to obtain all advisories that have a security impact rating of critical (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetWithHttpInfo(severity, startDate, endDate);
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format and additionally filter based of firstpublished start date and enddate 
     * @param severity Used to obtain all advisories that have a security impact rating of critical (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetWithHttpInfo(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetValidateBeforeCall(severity, startDate, endDate, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format and additionally filter based of firstpublished start date and enddate 
     * @param severity Used to obtain all advisories that have a security impact rating of critical (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetAsync(String severity, LocalDate startDate, LocalDate endDate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetValidateBeforeCall(severity, startDate, endDate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfSeveritySeverityGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityGetCall(String severity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/severity/{severity}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityGetValidateBeforeCall(String severity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling securityAdvisoriesCvrfSeveritySeverityGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityGetCall(severity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     * @param severity Critical, High, Medium, Low (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfSeveritySeverityGet(String severity) throws ApiException {
        securityAdvisoriesCvrfSeveritySeverityGetWithHttpInfo(severity);
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     * @param severity Critical, High, Medium, Low (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfSeveritySeverityGetWithHttpInfo(String severity) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityGetValidateBeforeCall(severity, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityGetAsync(String severity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityGetValidateBeforeCall(severity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfSeveritySeverityLastpublishedGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityLastpublishedGetCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/severity/{severity}/lastpublished".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityLastpublishedGetValidateBeforeCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling securityAdvisoriesCvrfSeveritySeverityLastpublishedGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling securityAdvisoriesCvrfSeveritySeverityLastpublishedGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling securityAdvisoriesCvrfSeveritySeverityLastpublishedGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityLastpublishedGetCall(severity, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     * @param severity Used to obtain all advisories that have a security impact rating of critical (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfSeveritySeverityLastpublishedGet(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        securityAdvisoriesCvrfSeveritySeverityLastpublishedGetWithHttpInfo(severity, startDate, endDate);
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     * @param severity Used to obtain all advisories that have a security impact rating of critical (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfSeveritySeverityLastpublishedGetWithHttpInfo(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityLastpublishedGetValidateBeforeCall(severity, startDate, endDate, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     * @param severity Used to obtain all advisories that have a security impact rating of critical (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfSeveritySeverityLastpublishedGetAsync(String severity, LocalDate startDate, LocalDate endDate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfSeveritySeverityLastpublishedGetValidateBeforeCall(severity, startDate, endDate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesCvrfYearYearGet */
    private com.squareup.okhttp.Call securityAdvisoriesCvrfYearYearGetCall(String year, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/cvrf/year/{year}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "year" + "\\}", apiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesCvrfYearYearGetValidateBeforeCall(String year, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling securityAdvisoriesCvrfYearYearGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfYearYearGetCall(year, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all security advisories that have were orginally published in a specific year &#x60;YYYY&#x60;. 
     * @param year The four digit year. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesCvrfYearYearGet(String year) throws ApiException {
        securityAdvisoriesCvrfYearYearGetWithHttpInfo(year);
    }

    /**
     * 
     * Used to obtain all security advisories that have were orginally published in a specific year &#x60;YYYY&#x60;. 
     * @param year The four digit year. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesCvrfYearYearGetWithHttpInfo(String year) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesCvrfYearYearGetValidateBeforeCall(year, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all security advisories that have were orginally published in a specific year &#x60;YYYY&#x60;. 
     * @param year The four digit year. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesCvrfYearYearGetAsync(String year, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesCvrfYearYearGetValidateBeforeCall(year, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesIosGet */
    private com.squareup.okhttp.Call securityAdvisoriesIosGetCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/ios".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesIosGetValidateBeforeCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling securityAdvisoriesIosGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesIosGetCall(version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all advisories that affects the given ios version 
     * @param version IOS version to obtain security advisories (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesIosGet(String version) throws ApiException {
        securityAdvisoriesIosGetWithHttpInfo(version);
    }

    /**
     * 
     * Used to obtain all advisories that affects the given ios version 
     * @param version IOS version to obtain security advisories (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesIosGetWithHttpInfo(String version) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesIosGetValidateBeforeCall(version, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all advisories that affects the given ios version 
     * @param version IOS version to obtain security advisories (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesIosGetAsync(String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesIosGetValidateBeforeCall(version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesIosxeGet */
    private com.squareup.okhttp.Call securityAdvisoriesIosxeGetCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/iosxe".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesIosxeGetValidateBeforeCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling securityAdvisoriesIosxeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesIosxeGetCall(version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all advisories that affects the given ios version 
     * @param version IOS version to obtain security advisories (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesIosxeGet(String version) throws ApiException {
        securityAdvisoriesIosxeGetWithHttpInfo(version);
    }

    /**
     * 
     * Used to obtain all advisories that affects the given ios version 
     * @param version IOS version to obtain security advisories (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesIosxeGetWithHttpInfo(String version) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesIosxeGetValidateBeforeCall(version, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all advisories that affects the given ios version 
     * @param version IOS version to obtain security advisories (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesIosxeGetAsync(String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesIosxeGetValidateBeforeCall(version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalAdvisoryAdvisoryIdGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalAdvisoryAdvisoryIdGetCall(String advisoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/advisory/{advisory_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "advisory_id" + "\\}", apiClient.escapeString(advisoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalAdvisoryAdvisoryIdGetValidateBeforeCall(String advisoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'advisoryId' is set
        if (advisoryId == null) {
            throw new ApiException("Missing the required parameter 'advisoryId' when calling securityAdvisoriesOvalAdvisoryAdvisoryIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalAdvisoryAdvisoryIdGetCall(advisoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain OVAL definitions for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     * @param advisoryId advisory ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalAdvisoryAdvisoryIdGet(String advisoryId) throws ApiException {
        securityAdvisoriesOvalAdvisoryAdvisoryIdGetWithHttpInfo(advisoryId);
    }

    /**
     * 
     * Used to obtain OVAL definitions for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     * @param advisoryId advisory ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalAdvisoryAdvisoryIdGetWithHttpInfo(String advisoryId) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalAdvisoryAdvisoryIdGetValidateBeforeCall(advisoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain OVAL definitions for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     * @param advisoryId advisory ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalAdvisoryAdvisoryIdGetAsync(String advisoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalAdvisoryAdvisoryIdGetValidateBeforeCall(advisoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalAllGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalAllGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/all".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalAllGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalAllGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all Open Vulnerability and Assessment Language (OVAL) definitions available for Cisco security vulnerabilities. For more information about OVAL go to https://communities.cisco.com/docs/DOC-63158 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/oval/all.xml 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalAllGet() throws ApiException {
        securityAdvisoriesOvalAllGetWithHttpInfo();
    }

    /**
     * 
     * Used to obtain all Open Vulnerability and Assessment Language (OVAL) definitions available for Cisco security vulnerabilities. For more information about OVAL go to https://communities.cisco.com/docs/DOC-63158 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/oval/all.xml 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalAllGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalAllGetValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all Open Vulnerability and Assessment Language (OVAL) definitions available for Cisco security vulnerabilities. For more information about OVAL go to https://communities.cisco.com/docs/DOC-63158 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/oval/all.xml 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalAllGetAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalAllGetValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalCveCveIdGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalCveCveIdGetCall(String cveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/cve/{cve_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "cve_id" + "\\}", apiClient.escapeString(cveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalCveCveIdGetValidateBeforeCall(String cveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cveId' is set
        if (cveId == null) {
            throw new ApiException("Missing the required parameter 'cveId' when calling securityAdvisoriesOvalCveCveIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalCveCveIdGetCall(cveId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain OVAL definitions for a given CVE Identifier. The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. 
     * @param cveId CVE Identifier (i.e., CVE-YYYY-NNNN) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalCveCveIdGet(String cveId) throws ApiException {
        securityAdvisoriesOvalCveCveIdGetWithHttpInfo(cveId);
    }

    /**
     * 
     * Used to obtain OVAL definitions for a given CVE Identifier. The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. 
     * @param cveId CVE Identifier (i.e., CVE-YYYY-NNNN) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalCveCveIdGetWithHttpInfo(String cveId) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalCveCveIdGetValidateBeforeCall(cveId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain OVAL definitions for a given CVE Identifier. The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. 
     * @param cveId CVE Identifier (i.e., CVE-YYYY-NNNN) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalCveCveIdGetAsync(String cveId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalCveCveIdGetValidateBeforeCall(cveId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalLatestNumberGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalLatestNumberGetCall(Integer number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/latest/{number}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalLatestNumberGetValidateBeforeCall(Integer number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling securityAdvisoriesOvalLatestNumberGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalLatestNumberGetCall(number, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all the latest OVAL definitions given an absolute number. For instance, the latest 10 or latest 5. 
     * @param number The latest OVAL definitions (absolute number). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalLatestNumberGet(Integer number) throws ApiException {
        securityAdvisoriesOvalLatestNumberGetWithHttpInfo(number);
    }

    /**
     * 
     * Used to obtain all the latest OVAL definitions given an absolute number. For instance, the latest 10 or latest 5. 
     * @param number The latest OVAL definitions (absolute number). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalLatestNumberGetWithHttpInfo(Integer number) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalLatestNumberGetValidateBeforeCall(number, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all the latest OVAL definitions given an absolute number. For instance, the latest 10 or latest 5. 
     * @param number The latest OVAL definitions (absolute number). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalLatestNumberGetAsync(Integer number, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalLatestNumberGetValidateBeforeCall(number, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalProductGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalProductGetCall(String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/product".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "product", product));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalProductGetValidateBeforeCall(String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling securityAdvisoriesOvalProductGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalProductGetCall(product, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all the oval advisories that affects the given product name. 
     * @param product An product name to obtain security advisories that matches given product name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalProductGet(String product) throws ApiException {
        securityAdvisoriesOvalProductGetWithHttpInfo(product);
    }

    /**
     * 
     * Used to obtain all the oval advisories that affects the given product name. 
     * @param product An product name to obtain security advisories that matches given product name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalProductGetWithHttpInfo(String product) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalProductGetValidateBeforeCall(product, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all the oval advisories that affects the given product name. 
     * @param product An product name to obtain security advisories that matches given product name. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalProductGetAsync(String product, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalProductGetValidateBeforeCall(product, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalSeveritySeverityFirstpublishedGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityFirstpublishedGetCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/severity/{severity}/firstpublished".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityFirstpublishedGetValidateBeforeCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling securityAdvisoriesOvalSeveritySeverityFirstpublishedGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling securityAdvisoriesOvalSeveritySeverityFirstpublishedGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling securityAdvisoriesOvalSeveritySeverityFirstpublishedGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityFirstpublishedGetCall(severity, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalSeveritySeverityFirstpublishedGet(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        securityAdvisoriesOvalSeveritySeverityFirstpublishedGetWithHttpInfo(severity, startDate, endDate);
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalSeveritySeverityFirstpublishedGetWithHttpInfo(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityFirstpublishedGetValidateBeforeCall(severity, startDate, endDate, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityFirstpublishedGetAsync(String severity, LocalDate startDate, LocalDate endDate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityFirstpublishedGetValidateBeforeCall(severity, startDate, endDate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalSeveritySeverityGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityGetCall(String severity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/severity/{severity}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityGetValidateBeforeCall(String severity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling securityAdvisoriesOvalSeveritySeverityGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityGetCall(severity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all OVAL definitions for a given security impact rating (critical, high, medium, or low). 
     * @param severity Used to obtain all OVAL definitions for advisories that have a security impact rating of critical (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalSeveritySeverityGet(String severity) throws ApiException {
        securityAdvisoriesOvalSeveritySeverityGetWithHttpInfo(severity);
    }

    /**
     * 
     * Used to obtain all OVAL definitions for a given security impact rating (critical, high, medium, or low). 
     * @param severity Used to obtain all OVAL definitions for advisories that have a security impact rating of critical (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalSeveritySeverityGetWithHttpInfo(String severity) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityGetValidateBeforeCall(severity, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all OVAL definitions for a given security impact rating (critical, high, medium, or low). 
     * @param severity Used to obtain all OVAL definitions for advisories that have a security impact rating of critical (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityGetAsync(String severity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityGetValidateBeforeCall(severity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for securityAdvisoriesOvalSeveritySeverityLastpublishedGet */
    private com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityLastpublishedGetCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/security/advisories/oval/severity/{severity}/lastpublished".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "psirt_openvuln_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityLastpublishedGetValidateBeforeCall(String severity, LocalDate startDate, LocalDate endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling securityAdvisoriesOvalSeveritySeverityLastpublishedGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling securityAdvisoriesOvalSeveritySeverityLastpublishedGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling securityAdvisoriesOvalSeveritySeverityLastpublishedGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityLastpublishedGetCall(severity, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void securityAdvisoriesOvalSeveritySeverityLastpublishedGet(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        securityAdvisoriesOvalSeveritySeverityLastpublishedGetWithHttpInfo(severity, startDate, endDate);
    }

    /**
     * 
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> securityAdvisoriesOvalSeveritySeverityLastpublishedGetWithHttpInfo(String severity, LocalDate startDate, LocalDate endDate) throws ApiException {
        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityLastpublishedGetValidateBeforeCall(severity, startDate, endDate, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     * @param severity Critical, High, Medium, Low (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call securityAdvisoriesOvalSeveritySeverityLastpublishedGetAsync(String severity, LocalDate startDate, LocalDate endDate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = securityAdvisoriesOvalSeveritySeverityLastpublishedGetValidateBeforeCall(severity, startDate, endDate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
